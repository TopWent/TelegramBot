<?php

namespace TelegramBot\Controller;

use Exception;

class CountryBotController
{
    /** @var string  */
    public $country;

    /**
     * Перепарсил текст с документации в пару базовых методов
     * Какого-то готового решения не нашлось, потом можно это конечно в базу к примру
     * Или парсить каждый раз, что не несть хорошо
     * @var string[]
     */
    const UNICODE_EMODJI_COUNTRY = [
        'AscensionIsland' => '1F1E6 1F1E8',
        'Andorra' => '1F1E6 1F1E9',
        'UnitedArabEmirates' => '1F1E6 1F1EA',
        'Afghanistan' => '1F1E6 1F1EB',
        'Antigua&Barbuda' => '1F1E6 1F1EC',
        'Anguilla' => '1F1E6 1F1EE',
        'Albania' => '1F1E6 1F1F1',
        'Armenia' => '1F1E6 1F1F2',
        'Angola' => '1F1E6 1F1F4',
        'Antarctica' => '1F1E6 1F1F6',
        'Argentina' => '1F1E6 1F1F7',
        'AmericanSamoa' => '1F1E6 1F1F8',
        'Austria' => '1F1E6 1F1F9',
        'Australia' => '1F1E6 1F1FA',
        'Aruba' => '1F1E6 1F1FC',
        'ÅlandIslands' => '1F1E6 1F1FD',
        'Azerbaijan' => '1F1E6 1F1FF',
        'Bosnia&Herzegovina' => '1F1E7 1F1E6',
        'Barbados' => '1F1E7 1F1E7',
        'Bangladesh' => '1F1E7 1F1E9',
        'Belgium' => '1F1E7 1F1EA',
        'BurkinaFaso' => '1F1E7 1F1EB',
        'Bulgaria' => '1F1E7 1F1EC',
        'Bahrain' => '1F1E7 1F1ED',
        'Burundi' => '1F1E7 1F1EE',
        'Benin' => '1F1E7 1F1EF',
        'St.Barthélemy' => '1F1E7 1F1F1',
        'Bermuda' => '1F1E7 1F1F2',
        'Brunei' => '1F1E7 1F1F3',
        'Bolivia' => '1F1E7 1F1F4',
        'CaribbeanNetherlands' => '1F1E7 1F1F6',
        'Brazil' => '1F1E7 1F1F7',
        'Bahamas' => '1F1E7 1F1F8',
        'Bhutan' => '1F1E7 1F1F9',
        'BouvetIsland' => '1F1E7 1F1FB',
        'Botswana' => '1F1E7 1F1FC',
        'Belarus' => '1F1E7 1F1FE',
        'Belize' => '1F1E7 1F1FF',
        'Canada' => '1F1E8 1F1E6',
        'Cocos(KeelingIslands' => '1F1E8 1F1E8',
        'Congo-Kinshasa' => '1F1E8 1F1E9',
        'CentralAfricanRepublic' => '1F1E8 1F1EB',
        'Congo-Brazzaville' => '1F1E8 1F1EC',
        'Switzerland' => '1F1E8 1F1ED',
        'Côted’Ivoire' => '1F1E8 1F1EE',
        'CookIslands' => '1F1E8 1F1F0',
        'Chile' => '1F1E8 1F1F1',
        'Cameroon' => '1F1E8 1F1F2',
        'China' => '1F1E8 1F1F3',
        'Colombia' => '1F1E8 1F1F4',
        'ClippertonIsland' => '1F1E8 1F1F5',
        'CostaRica' => '1F1E8 1F1F7',
        'Cuba' => '1F1E8 1F1FA',
        'CapeVerde' => '1F1E8 1F1FB',
        'Curaçao' => '1F1E8 1F1FC',
        'ChristmasIsland' => '1F1E8 1F1FD',
        'Cyprus' => '1F1E8 1F1FE',
        'Czechia' => '1F1E8 1F1FF',
        'Germany' => '1F1E9 1F1EA',
        'DiegoGarcia' => '1F1E9 1F1EC',
        'Djibouti' => '1F1E9 1F1EF',
        'Denmark' => '1F1E9 1F1F0',
        'Dominica' => '1F1E9 1F1F2',
        'DominicanRepublic' => '1F1E9 1F1F4',
        'Algeria' => '1F1E9 1F1FF',
        'Ceuta&Melilla' => '1F1EA 1F1E6',
        'Ecuador' => '1F1EA 1F1E8',
        'Estonia' => '1F1EA 1F1EA',
        'Egypt' => '1F1EA 1F1EC',
        'WesternSahara' => '1F1EA 1F1ED',
        'Eritrea' => '1F1EA 1F1F7',
        'Spain' => '1F1EA 1F1F8',
        'Ethiopia' => '1F1EA 1F1F9',
        'EuropeanUnion' => '1F1EA 1F1FA',
        'Finland' => '1F1EB 1F1EE',
        'Fiji' => '1F1EB 1F1EF',
        'FalklandIslands' => '1F1EB 1F1F0',
        'Micronesia' => '1F1EB 1F1F2',
        'FaroeIslands' => '1F1EB 1F1F4',
        'France' => '1F1EB 1F1F7',
        'Gabon' => '1F1EC 1F1E6',
        'UnitedKingdom' => '1F1EC 1F1E7',
        'Grenada' => '1F1EC 1F1E9',
        'Georgia' => '1F1EC 1F1EA',
        'FrenchGuiana' => '1F1EC 1F1EB',
        'Guernsey' => '1F1EC 1F1EC',
        'Ghana' => '1F1EC 1F1ED',
        'Gibraltar' => '1F1EC 1F1EE',
        'Greenland' => '1F1EC 1F1F1',
        'Gambia' => '1F1EC 1F1F2',
        'Guinea' => '1F1EC 1F1F3',
        'Guadeloupe' => '1F1EC 1F1F5',
        'EquatorialGuinea' => '1F1EC 1F1F6',
        'Greece' => '1F1EC 1F1F7',
        'SouthGeorgia&SouthSandwichIslands' => '1F1EC 1F1F8',
        'Guatemala' => '1F1EC 1F1F9',
        'Guam' => '1F1EC 1F1FA',
        'Guinea-Bissau' => '1F1EC 1F1FC',
        'Guyana' => '1F1EC 1F1FE',
        'HongKongSARChina' => '1F1ED 1F1F0',
        'Heard&McDonaldIslands' => '1F1ED 1F1F2',
        'Honduras' => '1F1ED 1F1F3',
        'Croatia' => '1F1ED 1F1F7',
        'Haiti' => '1F1ED 1F1F9',
        'Hungary' => '1F1ED 1F1FA',
        'CanaryIslands' => '1F1EE 1F1E8',
        'Indonesia' => '1F1EE 1F1E9',
        'Ireland' => '1F1EE 1F1EA',
        'Israel' => '1F1EE 1F1F1',
        'IsleofMan' => '1F1EE 1F1F2',
        'India' => '1F1EE 1F1F3',
        'BritishIndianOceanTerritory' => '1F1EE 1F1F4',
        'Iraq' => '1F1EE 1F1F6',
        'Iran' => '1F1EE 1F1F7',
        'Iceland' => '1F1EE 1F1F8',
        'Italy' => '1F1EE 1F1F9',
        'Jersey' => '1F1EF 1F1EA',
        'Jamaica' => '1F1EF 1F1F2',
        'Jordan' => '1F1EF 1F1F4',
        'Japan' => '1F1EF 1F1F5',
        'Kenya' => '1F1F0 1F1EA',
        'Kyrgyzstan' => '1F1F0 1F1EC',
        'Cambodia' => '1F1F0 1F1ED',
        'Kiribati' => '1F1F0 1F1EE',
        'Comoros' => '1F1F0 1F1F2',
        'St.Kitts&Nevis' => '1F1F0 1F1F3',
        'NorthKorea' => '1F1F0 1F1F5',
        'SouthKorea' => '1F1F0 1F1F7',
        'Kuwait' => '1F1F0 1F1FC',
        'CaymanIslands' => '1F1F0 1F1FE',
        'Kazakhstan' => '1F1F0 1F1FF',
        'Laos' => '1F1F1 1F1E6',
        'Lebanon' => '1F1F1 1F1E7',
        'St.Lucia' => '1F1F1 1F1E8',
        'Liechtenstein' => '1F1F1 1F1EE',
        'SriLanka' => '1F1F1 1F1F0',
        'Liberia' => '1F1F1 1F1F7',
        'Lesotho' => '1F1F1 1F1F8',
        'Lithuania' => '1F1F1 1F1F9',
        'Luxembourg' => '1F1F1 1F1FA',
        'Latvia' => '1F1F1 1F1FB',
        'Libya' => '1F1F1 1F1FE',
        'Morocco' => '1F1F2 1F1E6',
        'Monaco' => '1F1F2 1F1E8',
        'Moldova' => '1F1F2 1F1E9',
        'Montenegro' => '1F1F2 1F1EA',
        'St.Martin' => '1F1F2 1F1EB',
        'Madagascar' => '1F1F2 1F1EC',
        'MarshallIslands' => '1F1F2 1F1ED',
        'Macedonia' => '1F1F2 1F1F0',
        'Mali' => '1F1F2 1F1F1',
        'Myanmar(Burma' => '1F1F2 1F1F2',
        'Mongolia' => '1F1F2 1F1F3',
        'MacauSARChina' => '1F1F2 1F1F4',
        'NorthernMarianaIslands' => '1F1F2 1F1F5',
        'Martinique' => '1F1F2 1F1F6',
        'Mauritania' => '1F1F2 1F1F7',
        'Montserrat' => '1F1F2 1F1F8',
        'Malta' => '1F1F2 1F1F9',
        'Mauritius' => '1F1F2 1F1FA',
        'Maldives' => '1F1F2 1F1FB',
        'Malawi' => '1F1F2 1F1FC',
        'Mexico' => '1F1F2 1F1FD',
        'Malaysia' => '1F1F2 1F1FE',
        'Mozambique' => '1F1F2 1F1FF',
        'Namibia' => '1F1F3 1F1E6',
        'NewCaledonia' => '1F1F3 1F1E8',
        'Niger' => '1F1F3 1F1EA',
        'NorfolkIsland' => '1F1F3 1F1EB',
        'Nigeria' => '1F1F3 1F1EC',
        'Nicaragua' => '1F1F3 1F1EE',
        'Netherlands' => '1F1F3 1F1F1',
        'Norway' => '1F1F3 1F1F4',
        'Nepal' => '1F1F3 1F1F5',
        'Nauru' => '1F1F3 1F1F7',
        'Niue' => '1F1F3 1F1FA',
        'NewZealand' => '1F1F3 1F1FF',
        'Oman' => '1F1F4 1F1F2',
        'Panama' => '1F1F5 1F1E6',
        'Peru' => '1F1F5 1F1EA',
        'FrenchPolynesia' => '1F1F5 1F1EB',
        'PapuaNewGuinea' => '1F1F5 1F1EC',
        'Philippines' => '1F1F5 1F1ED',
        'Pakistan' => '1F1F5 1F1F0',
        'Poland' => '1F1F5 1F1F1',
        'St.Pierre&Miquelon' => '1F1F5 1F1F2',
        'PitcairnIslands' => '1F1F5 1F1F3',
        'PuertoRico' => '1F1F5 1F1F7',
        'PalestinianTerritories' => '1F1F5 1F1F8',
        'Portugal' => '1F1F5 1F1F9',
        'Palau' => '1F1F5 1F1FC',
        'Paraguay' => '1F1F5 1F1FE',
        'Qatar' => '1F1F6 1F1E6',
        'Réunion' => '1F1F7 1F1EA',
        'Romania' => '1F1F7 1F1F4',
        'Serbia' => '1F1F7 1F1F8',
        'Russia' => '1F1F7 1F1FA',
        'Rwanda' => '1F1F7 1F1FC',
        'SaudiArabia' => '1F1F8 1F1E6',
        'SolomonIslands' => '1F1F8 1F1E7',
        'Seychelles' => '1F1F8 1F1E8',
        'Sudan' => '1F1F8 1F1E9',
        'Sweden' => '1F1F8 1F1EA',
        'Singapore' => '1F1F8 1F1EC',
        'St.Helena' => '1F1F8 1F1ED',
        'Slovenia' => '1F1F8 1F1EE',
        'Svalbard&JanMayen' => '1F1F8 1F1EF',
        'Slovakia' => '1F1F8 1F1F0',
        'SierraLeone' => '1F1F8 1F1F1',
        'SanMarino' => '1F1F8 1F1F2',
        'Senegal' => '1F1F8 1F1F3',
        'Somalia' => '1F1F8 1F1F4',
        'Suriname' => '1F1F8 1F1F7',
        'SouthSudan' => '1F1F8 1F1F8',
        'SãoTomé&Príncipe' => '1F1F8 1F1F9',
        'ElSalvador' => '1F1F8 1F1FB',
        'SintMaarten' => '1F1F8 1F1FD',
        'Syria' => '1F1F8 1F1FE',
        'Swaziland' => '1F1F8 1F1FF',
        'TristandaCunha' => '1F1F9 1F1E6',
        'Turks&CaicosIslands' => '1F1F9 1F1E8',
        'Chad' => '1F1F9 1F1E9',
        'FrenchSouthernTerritories' => '1F1F9 1F1EB',
        'Togo' => '1F1F9 1F1EC',
        'Thailand' => '1F1F9 1F1ED',
        'Tajikistan' => '1F1F9 1F1EF',
        'Tokelau' => '1F1F9 1F1F0',
        'Timor-Leste' => '1F1F9 1F1F1',
        'Turkmenistan' => '1F1F9 1F1F2',
        'Tunisia' => '1F1F9 1F1F3',
        'Tonga' => '1F1F9 1F1F4',
        'Turkey' => '1F1F9 1F1F7',
        'Trinidad&Tobago' => '1F1F9 1F1F9',
        'Tuvalu' => '1F1F9 1F1FB',
        'Taiwan' => '1F1F9 1F1FC',
        'Tanzania' => '1F1F9 1F1FF',
        'Ukraine' => '1F1FA 1F1E6',
        'Uganda' => '1F1FA 1F1EC',
        'U.S.OutlyingIslands' => '1F1FA 1F1F2',
        'UnitedNations' => '1F1FA 1F1F3',
        'UnitedStates' => '1F1FA 1F1F8',
        'Uruguay' => '1F1FA 1F1FE',
        'Uzbekistan' => '1F1FA 1F1FF',
        'VaticanCity' => '1F1FB 1F1E6',
        'St.Vincent&Grenadines' => '1F1FB 1F1E8',
        'Venezuela' => '1F1FB 1F1EA',
        'BritishVirginIslands' => '1F1FB 1F1EC',
        'U.S.VirginIslands' => '1F1FB 1F1EE',
        'Vietnam' => '1F1FB 1F1F3',
        'Vanuatu' => '1F1FB 1F1FA',
        'Wallis&Futuna' => '1F1FC 1F1EB',
        'Samoa' => '1F1FC 1F1F8',
        'Kosovo' => '1F1FD 1F1F0',
        'Yemen' => '1F1FE 1F1EA',
        'SouthAfrica' => '1F1FF 1F1E6',
        'Zimbabwe' => '1F1FF 1F1FC',
        'Zambia' => '1F1FF 1F1F2',
        'Mayotte' => '1F1FE 1F1F9',
    ];

    public function __construct(string $country)
    {
        $this->country = $country;
    }

    public function getUnicode(): string
    {
        $unicode = static::UNICODE_EMODJI_COUNTRY[$this->country]
            ?? new Exception('Страна не найдена');

        return urlencode($unicode);
    }
}
